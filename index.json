[
{
	"uri": "https://dgoppenheimer.github.io/pymol-notes/introduction/building-this-site/",
	"title": "Building this site",
	"tags": [],
	"description": "",
	"content": "I already have Hugo installed. I installed it using MacPorts.\nCreate a project cd ~/Sites hugo new site pymol-notes Install the theme I want to use the Learn theme for Hugo. It is a theme designed for documentation. It looks nice and is functional.\nThe theme\u0026rsquo;s repository is: https://github.com/matcornic/hugo-theme-learn.git.\ncd pymol-notes git init git submodule add https://github.com/matcornic/hugo-theme-learn.git themes/hugo-theme-learn echo \u0026#39;theme = \u0026#34;hugo-theme-learn\u0026#34;\u0026#39; \u0026gt;\u0026gt; config.toml Configure the theme Open config.toml and add the following:\n# Change the default theme to be use when building the site with Hugo theme = \u0026#34;hugo-theme-learn\u0026#34; # Change the title title = \u0026#34;PyMOL Notes\u0026#34; # For search functionality [outputs] home = [ \u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;, \u0026#34;JSON\u0026#34;] Create a chapter page hugo new --kind chapter introduction/_index.md Create some content hugo new introduction/building-this-site.md Spin up the site hugo server  When you run hugo server, Hugo will build the site in and serve the pages from memory.\n Go to http://localhost:1313.\nSuccess!\nIf you want the site to be built in and served from the public directory, then run hugo server --renderToDisk. If you just want to build the site in the public directory, then run hugo.\n Create a homepage hugo new _index.md Add some content to the homepage, and you\u0026rsquo;re good to go!\n"
},
{
	"uri": "https://dgoppenheimer.github.io/pymol-notes/introduction/hosting-the-site-on-github/",
	"title": "Hosting the Site on Github",
	"tags": [],
	"description": "",
	"content": "I more-or-less followed the instructions provided on the Hugo website.\nI already have a GitHub account. I\u0026rsquo;ll create a new public repository called pymol-notes, which will be the repository for my project. I\u0026rsquo;ll deploy my site from the gh-pages branch of my project.\nUpdate the local repository for the site.\ngit add . git status On branch master No commits yet Changes to be committed: (use \u0026#34;git rm --cached \u0026lt;file\u0026gt;...\u0026#34; to unstage) new file: .gitignore new file: .gitmodules new file: archetypes/default.md new file: config.toml new file: content/introduction/.DS_Store new file: content/introduction/_index.md new file: content/introduction/building-this-site.md new file: themes/hugo-theme-learn Commit the files.\ngit commit -a -m \u0026#34;first commit of site\u0026#34; Oops. I need to untrack the .DS_Store files.\ngit rm --cached content/introduction/.DS_Store echo \u0026#34;.DS_Store\u0026#34; \u0026gt;\u0026gt; .gitignore Preparations for gh-pages branch These steps only need to be done once. Replace upstream with the name of your remote; e.g., origin:\nMake sure your baseURL key-value in your site\u0026rsquo;s config.toml configuration file reflects the full URL of your GitHub pages repository if you’re using the default GitHub Pages URL (e.g., .github.io//) and not a custom domain.\n For this project, in config.toml, change baseURL = \u0026quot;http://example.org/\u0026quot; to\nbaseURL = \u0026#34;https://dgoppenheimer.github.io/pymol-notes/\u0026#34; Add the public folder to .gitignore Add the public folder to the .gitignore in your project root. You don\u0026rsquo;t need to track the files for the built site, only for the source files.\necho \u0026#34;public\u0026#34; \u0026gt;\u0026gt; .gitignore Initialize your gh-pages branch Initialize your local gh-pages branch as an empty orphan branch:\ngit checkout --orphan gh-pages git reset --hard git commit --allow-empty -m \u0026#34;Initializing gh-pages branch\u0026#34; git remote add origin git@github.com:dgoppenheimer/pymol-notes.git git push origin gh-pages git checkout master Build and deploy your project Checkout the gh-pages branch into your public directory using the git worktree feature. This feature allows you to checkout and have different branches of the same local repository in different directories.\nrm -rf public git worktree add -B gh-pages public origin/gh-pages Regenerate the site using the hugo command and commit the generated files on the gh-pages branch.\nhugo cd public git add --all git commit -m \u0026#34;Publishing to gh-pages\u0026#34; cd .. Or as a script, commit-gh-pages-files.sh\nhugo cd public \u0026amp;\u0026amp; git add --all \u0026amp;\u0026amp; git commit -m \u0026#34;Publishing to gh-pages\u0026#34; \u0026amp;\u0026amp; cd .. Push the changes to the gh-pages branch to the GitHub repo.\ngit push origin gh-pages Set gh-pages as your publish branch To publish the gh-pages branch as your site, you need to tweak some setting in GitHub.\n Log into your account using a web browser. Go to Settings → GitHub Pages. From Source, select gh-pages branch and then Save.  The site should be visible at https://dgoppenheimer.github.io/pymol-notes/.\nSuccess!\nTo automate the publishing to gh-pages process, create the following script: publish_to_ghpages.sh. Put this script in your project directory.\n#!/bin/sh if [ \u0026#34;`git status -s`\u0026#34; ] then echo \u0026#34;The working directory is dirty. Please commit any pending changes.\u0026#34; exit 1; fi echo \u0026#34;Deleting old publication\u0026#34; rm -rf public mkdir public git worktree prune rm -rf .git/worktrees/public/ echo \u0026#34;Checking out gh-pages branch into public\u0026#34; git worktree add -B gh-pages public origin/gh-pages echo \u0026#34;Removing existing files\u0026#34; rm -rf public/* echo \u0026#34;Generating site\u0026#34; hugo echo \u0026#34;Updating gh-pages branch\u0026#34; cd public \u0026amp;\u0026amp; git add --all \u0026amp;\u0026amp; git commit -m \u0026#34;Publishing to gh-pages (publish.sh)\u0026#34; #echo \u0026#34;Pushing to github\u0026#34; #git push --all Make the script executable.\nchmod +x publish_to_ghpages.sh Run the script with ./publish_to_ghpages.sh. Either uncomment the git push line, or manually run git push --all. Wait a few minutes and the site should be live on GitHub.\n"
},
{
	"uri": "https://dgoppenheimer.github.io/pymol-notes/introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Chapter 1 Introduction Here I\u0026rsquo;ll document how I built this site. Thanks to excellent documentation, it was fairly straightforward.\n"
},
{
	"uri": "https://dgoppenheimer.github.io/pymol-notes/introduction/creating-a-logo/",
	"title": "Creating a Logo",
	"tags": [],
	"description": "",
	"content": "I\u0026rsquo;ll create my own logo to replace the beautiful GRAV logo.\nOpen PyMOL.\nfetch 3G6M, mol, async=0 extract caf1, /mol//A/CFF`427 h_add set valence, 0 hide everything, caf1 create molball, caf1 create molstick, caf1 show spheres, molball set sphere_scale, 0.25 show sticks, molstick set stick_radius, 0.15 disable mol color hydrogen, elem H and molball color wheat, elem C and molball color salmon, elem O and molball color lightblue, elem N and molball color skyblue, molstick set orthoscopic, off set field_of_view, 60 set ray_opaque_background, off viewport 640, 640 png caffeine-logo.png, width=640, height=640, ray=1 I opened this image in Affinity Designer, changed it to black and white, added the text (and rounded the ends of the letters), and saved it as an .svg file. I minimized the .svg file on the https://jakearchibald.github.io/svgomg/ site.\nUpdate The .svg file was rather large and didn\u0026rsquo;t look right. I decided to try something different. I used the .png file from PyMOL as a template and created a series of tubes for the bonds and circles for the atoms. I used a 2 pt black stroke and filled the objects with white. It took a while to get the layers in the correct order so the appropriate bonds were on top of the appropriate atoms. I saved the file as a .svg file. Without the .png embedded as base64, the file was much smaller.\nRefer to this post on Best Practices for Working with SVGs for useful tips.\nDo not change the logo.html file in the pymol-notes/themes/hugo-theme-learn/layouts/partials/ directory. Instead make a new partial in the layouts/partials directory of your local project. This partial will have the priority.\n Create a partials directory in the pymol-notes/layouts/ directory. Copy the logo.html file from pymol-notes/themes/hugo-theme-learn/layouts/partials/ to the pymol-notes/layouts/partials directory.\nOpen the new copy of logo.html in your favorite text editor and replace the svg code with your new logo.\nThe logo size will adapt to different screen sizes automatically.\n Replace the code in between the \u0026lt;svg\u0026gt; tags in logo.html with the contents of your .svg file. Also add the following to the \u0026lt;svg\u0026gt; tag:\nid=\u0026#34;pymol-notes-logo\u0026#34; style=\u0026#34;width:100%; height:100%;\u0026#34; To the second and third \u0026lt;path\u0026gt; tags, add fill=\u0026quot;#fff\u0026quot; so that the text is displayed as white.\nSave the logo.html file, and spin up the site with hugo server. Check the site locally at 127.0.0.1:1313/pymol-notes.\nSuccess!\nCreate a favicon Select the molecule image and paste it into a new Affinity Designer document.\nExport it as favicon.png at 64 x 52 px (144 dpi resolution).\nPlace it in the local static/images/ folder.\nSuccess!\n"
},
{
	"uri": "https://dgoppenheimer.github.io/pymol-notes/introduction/customizing-the-site/",
	"title": "Customizing the Site",
	"tags": [],
	"description": "",
	"content": "Removing the copy-to-clipboard button from inline code The copy-to-clipboard button is useful on code blocks, but distracting when attached to the inline code. I thought I could remove it using custom css, so I created a static/css directory in the root of my project and added a custom.css file to contain my overrides. To have hugo see the custom file, add the following to config.toml:\n[params] custom_css = [\u0026#34;css/custom.css\u0026#34;] Now I need to figure out how what css to override.\nFrom searching the web, I found an old issue on the hugo-theme-learn repository, Configuration of the appearance of the copy-to-clipboard icons, where a user suggested using this css:\n:not(pre) \u0026gt; code + span.copy-to-clipboard { display: none; } But more importantly, the theme designer, matcornic, updated the theme to provide this function in the theme\u0026rsquo;s configuration file.\nAdd this to config.toml in the [params] section:\n[params] disableInlineCopyToClipBoard = true Success!\nIf I would have read the Configuration section of the Learn Theme for Hugo documentation, I would have seen the global site parameters where disableInlineCopyToClipBoard is mentioned.\n "
},
{
	"uri": "https://dgoppenheimer.github.io/pymol-notes/",
	"title": "PyMOL Notes",
	"tags": [],
	"description": "",
	"content": "  Welcome to PyMOL Notes Mainly, I built this site to keep track of my notes when using PyMOL. Hopefully I\u0026rsquo;ll be able to find what I need, when I need it.\nBut I also wanted to make a website using Hugo. I previously built a blog, Cell Bones, using Jekyll. When I found the Hugo theme, Learn, I thought it would be ideal to sort out all my PyMOL notes.\n"
},
{
	"uri": "https://dgoppenheimer.github.io/pymol-notes/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dgoppenheimer.github.io/pymol-notes/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]