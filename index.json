[
{
	"uri": "https://dgoppenheimer.github.io/pymol-notes/introduction/building-this-site/",
	"title": "Building this site",
	"tags": [],
	"description": "",
	"content": "I already have Hugo installed. I installed it using MacPorts.\nCreate a project cd ~/Sites hugo new site pymol-notes Install the theme I want to use the Learn theme for Hugo. It is a theme designed for documentation. It looks nice and is functional.\nThe theme\u0026rsquo;s repository is: https://github.com/matcornic/hugo-theme-learn.git.\ncd pymol-notes git init git submodule add https://github.com/matcornic/hugo-theme-learn.git themes/hugo-theme-learn echo \u0026#39;theme = \u0026#34;hugo-theme-learn\u0026#34;\u0026#39; \u0026gt;\u0026gt; config.toml Configure the theme Open config.toml and add the following:\n# Change the default theme to be use when building the site with Hugo theme = \u0026#34;hugo-theme-learn\u0026#34; # Change the title title = \u0026#34;PyMOL Notes\u0026#34; # For search functionality [outputs] home = [ \u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;, \u0026#34;JSON\u0026#34;] Create a chapter page hugo new --kind chapter introduction/_index.md Create some content hugo new introduction/building-this-site.md Spin up the site hugo server  When you run hugo server, Hugo will build the site in and serve the pages from memory.\n Go to http://localhost:1313.\nSuccess!\nIf you want the site to be built in, and served from, the public directory, then run hugo server --renderToDisk. If you just want to build the site in the public directory, then run hugo.\n Create a homepage hugo new _index.md Add some content to the homepage, and you\u0026rsquo;re good to go!\nAdd another chapter page # make sure you are in the pymol-notes directory cd ~/Sites/pymol-notes hugo new --kind chapter GROMACS-simulations/_index.md  Open the new _index.md file and change the front matter and add some text. Create some content:  hugo new GROMACS-simulations/protein-ligand-tutorial.md  Open protein-ligand-tutorial.md and paste in the contents of my research notes .md file.  Save the files, and track them with git.\ngit status git add . git commit -m \u0026#34;added a new chapter on gromacs\u0026#34; # deploy the new pages git push origin main Getting equations to display properly I use equations sometimes, and it is nice to have them display properly on webpages. I found this post on MathJax support in the Hugo documentation. I put the following HTML code in my /layouts/partials/footer.html file.\n"
},
{
	"uri": "https://dgoppenheimer.github.io/pymol-notes/introduction/hosting-the-site-on-github/",
	"title": "Hosting the Site on Github",
	"tags": [],
	"description": "",
	"content": "I more-or-less followed the instructions provided on the Hugo website.\nI already have a GitHub account. I\u0026rsquo;ll create a new public repository called pymol-notes, which will be the repository for my project. I\u0026rsquo;ll deploy my site from the gh-pages branch of my project.\nUpdate the local repository for the site.\ngit add . git status On branch master No commits yet Changes to be committed: (use \u0026#34;git rm --cached \u0026lt;file\u0026gt;...\u0026#34; to unstage) new file: .gitignore new file: .gitmodules new file: archetypes/default.md new file: config.toml new file: content/introduction/.DS_Store new file: content/introduction/_index.md new file: content/introduction/building-this-site.md new file: themes/hugo-theme-learn Commit the files.\ngit commit -a -m \u0026#34;first commit of site\u0026#34; Oops. I need to untrack the .DS_Store files.\ngit rm --cached content/introduction/.DS_Store echo \u0026#34;.DS_Store\u0026#34; \u0026gt;\u0026gt; .gitignore Preparations for gh-pages branch These steps only need to be done once. Replace upstream with the name of your remote; e.g., origin:\nMake sure your baseURL key-value in your site\u0026rsquo;s config.toml configuration file reflects the full URL of your GitHub pages repository if you’re using the default GitHub Pages URL (e.g., .github.io//) and not a custom domain.\n For this project, in config.toml, change baseURL = \u0026quot;http://example.org/\u0026quot; to\nbaseURL = \u0026#34;https://dgoppenheimer.github.io/pymol-notes/\u0026#34; Add the public folder to .gitignore Add the public folder to the .gitignore in your project root. You don\u0026rsquo;t need to track the files for the built site, only for the source files.\necho \u0026#34;public\u0026#34; \u0026gt;\u0026gt; .gitignore Initialize your gh-pages branch Initialize your local gh-pages branch as an empty orphan branch:\ngit checkout --orphan gh-pages git reset --hard git commit --allow-empty -m \u0026#34;Initializing gh-pages branch\u0026#34; git remote add origin git@github.com:dgoppenheimer/pymol-notes.git git push origin gh-pages git checkout master Build and deploy your project Checkout the gh-pages branch into your public directory using the git worktree feature. This feature allows you to checkout and have different branches of the same local repository in different directories.\nrm -rf public git worktree add -B gh-pages public origin/gh-pages Regenerate the site using the hugo command and commit the generated files on the gh-pages branch.\nhugo cd public git add --all git commit -m \u0026#34;Publishing to gh-pages\u0026#34; cd .. Or as a script, commit-gh-pages-files.sh\nhugo cd public \u0026amp;\u0026amp; git add --all \u0026amp;\u0026amp; git commit -m \u0026#34;Publishing to gh-pages\u0026#34; \u0026amp;\u0026amp; cd .. Push the changes to the gh-pages branch to the GitHub repo.\ngit push origin gh-pages Set gh-pages as your publish branch To publish the gh-pages branch as your site, you need to tweak some setting in GitHub.\n Log into your account using a web browser. Go to Settings → GitHub Pages. From Source, select gh-pages branch and then Save.  The site should be visible at https://dgoppenheimer.github.io/pymol-notes/.\nSuccess!\nTo automate the publishing to gh-pages process, create the following script: publish_to_ghpages.sh. Put this script in your project directory.\n#!/bin/sh if [ \u0026#34;`git status -s`\u0026#34; ] then echo \u0026#34;The working directory is dirty. Please commit any pending changes.\u0026#34; exit 1; fi echo \u0026#34;Deleting old publication\u0026#34; rm -rf public mkdir public git worktree prune rm -rf .git/worktrees/public/ echo \u0026#34;Checking out gh-pages branch into public\u0026#34; git worktree add -B gh-pages public origin/gh-pages echo \u0026#34;Removing existing files\u0026#34; rm -rf public/* echo \u0026#34;Generating site\u0026#34; hugo echo \u0026#34;Updating gh-pages branch\u0026#34; cd public \u0026amp;\u0026amp; git add --all \u0026amp;\u0026amp; git commit -m \u0026#34;Publishing to gh-pages (publish.sh)\u0026#34; #echo \u0026#34;Pushing to github\u0026#34; #git push --all Make the script executable.\nchmod +x publish_to_ghpages.sh Run the script with ./publish_to_ghpages.sh. Either uncomment the git push line, or manually run git push --all. Wait a few minutes and the site should be live on GitHub.\n"
},
{
	"uri": "https://dgoppenheimer.github.io/pymol-notes/introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Chapter 1 Introduction Here I\u0026rsquo;ll document how I built this site. Thanks to excellent documentation for Hugo and the theme, it was straightforward.\n"
},
{
	"uri": "https://dgoppenheimer.github.io/pymol-notes/gromacs-simulations/",
	"title": "GROMACS Simulations",
	"tags": [],
	"description": "",
	"content": "Chapter 2 GROMACS Simulations Here I\u0026rsquo;ll document my learning of GROMACS for molecular dynamics simulations. I\u0026rsquo;ll start with a few tutorials and then move on to some of the proteins (including membrane proteins) that I discuss in my Cancer Biology course.\n"
},
{
	"uri": "https://dgoppenheimer.github.io/pymol-notes/introduction/creating-a-logo/",
	"title": "Creating a Logo",
	"tags": [],
	"description": "",
	"content": "I\u0026rsquo;ll create my own logo to replace the beautiful GRAV logo.\nOpen PyMOL.\nfetch 3G6M, mol, async=0 extract caf1, /mol//A/CFF`427 h_add set valence, 0 hide everything, caf1 create molball, caf1 create molstick, caf1 show spheres, molball set sphere_scale, 0.25 show sticks, molstick set stick_radius, 0.15 disable mol color hydrogen, elem H and molball color wheat, elem C and molball color salmon, elem O and molball color lightblue, elem N and molball color skyblue, molstick set orthoscopic, off set field_of_view, 60 set ray_opaque_background, off viewport 640, 640 png caffeine-logo.png, width=640, height=640, ray=1 I opened this image in Affinity Designer, changed it to black and white, added the text (and rounded the ends of the letters), and saved it as an .svg file. I minimized the .svg file on the https://jakearchibald.github.io/svgomg/ site.\nUpdate The .svg file was rather large and didn\u0026rsquo;t look right. I decided to try something different. I used the .png file from PyMOL as a template and created a series of tubes for the bonds and circles for the atoms. I used a 2 pt black stroke and filled the objects with white. It took a while to get the layers in the correct order so the appropriate bonds were on top of the appropriate atoms. I saved the file as a .svg file. Without the .png embedded as base64, the file was much smaller.\nRefer to this post on Best Practices for Working with SVGs for useful tips.\nDo not change the logo.html file in the pymol-notes/themes/hugo-theme-learn/layouts/partials/ directory. Instead make a new partial in the layouts/partials directory of your local project. This partial will have the priority.\n Create a partials directory in the pymol-notes/layouts/ directory. Copy the logo.html file from pymol-notes/themes/hugo-theme-learn/layouts/partials/ to the pymol-notes/layouts/partials directory.\nOpen the new copy of logo.html in your favorite text editor and replace the svg code with your new logo.\nThe logo size will adapt to different screen sizes automatically.\n Replace the code in between the \u0026lt;svg\u0026gt; tags in logo.html with the contents of your .svg file. Also add the following to the \u0026lt;svg\u0026gt; tag:\nid=\u0026#34;pymol-notes-logo\u0026#34; style=\u0026#34;width:100%; height:100%;\u0026#34; To the second and third \u0026lt;path\u0026gt; tags, add fill=\u0026quot;#fff\u0026quot; so that the text is displayed as white.\nSave the logo.html file, and spin up the site with hugo server. Check the site locally at 127.0.0.1:1313/pymol-notes.\nSuccess!\nCreate a favicon Select the molecule image and paste it into a new Affinity Designer document.\nExport it as favicon.png at 64 x 52 px (144 dpi resolution).\nPlace it in the local static/images/ folder.\nSuccess!\n"
},
{
	"uri": "https://dgoppenheimer.github.io/pymol-notes/introduction/automatic-build-and-deploy/",
	"title": "Automatic Build and Deploy using GitHub Actions",
	"tags": [],
	"description": "",
	"content": "I\u0026rsquo;m using GitHub Pages to host this site. I started by building the site locally, and pushing the /public directory to my gh-pages branch on GitHub. (See these instructions on the Hugo website.) GitHub provides native support for building Jekyll sites, but does not have native support for Hugo. Nonetheless, using GitHub Actions, I can build and deploy my Hugo site automatically when I push new content to the main branch of my GitHub repository.\nGetting started Rename master to main First, rename local branch.\ncd ~/Sites/pymol-notes git branch -m master main git status On branch main nothing to commit, working tree clean Next, rename remote branch.\ngit push -u origin main git push origin --delete master Because I am the solo developer on this project and I have a single local repository, I don\u0026rsquo;t have to do anything else.\nAutomate the build and deploy workflow First, create a .github/workflows/ directory in your project root.\nNext, create a gh-pages.yaml file in the .github/workflows/ directory that has the following contents.\nname: Build and Deploy on: push: branches: - main jobs: build: runs-on: ubuntu-latest steps: - name: Checkout main uses: actions/checkout@v1 with: submodules: true - name: Hugo Deploy GitHub Pages uses: benmatselby/hugo-deploy-gh-pages@master env: HUGO_VERSION: 0.75.0 TARGET_REPO: dgoppenheimer.github.io/pymol-notes/ TOKEN: ${{ secrets.EXAMPLE_TOKEN }} Let\u0026rsquo;s test this.\nhugo new introduction/test-page.md Results No joy.\nHere is a nice tutorial:\nHugo: Deploy Static Site using GitHub Actions\nAnd another set of instructions that uses a similar .yml file from peaceiris:\nDeploy Hugo project to GitHub Pages with GitHub Actions\nI had success using the peaceiris actions\nHere is the gh-pages.yml file that I used:\nname: github pages on: push: branches: - main # Set a branch to deploy jobs: deploy: runs-on: ubuntu-18.04 steps: - uses: actions/checkout@v2 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;0.75.1\u0026#39; # extended: true - name: Build run: hugo - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: github_token: ${{ secrets.EXAMPLE_TOKEN }} publish_dir: ./public Note: I removed \u0026ndash;minify from run: hugo, otherwise, my svg logo was not visible.\nGreat. Now I can work on a page, save it and do the following to update the site:\ncd ~/Sites/pymol-notes git status git add . git commit -m \u0026#34;updated site, added a page, corrected typos\u0026#34; git push origin main "
},
{
	"uri": "https://dgoppenheimer.github.io/pymol-notes/gromacs-simulations/protein-ligand-tutorial/",
	"title": "Protein-Ligand Complex Tutorial",
	"tags": [],
	"description": "",
	"content": "This tutorial is from this website.\n  Download 3HTB from the RCSB website.\n  View the structure in VMD.\n  cd ../gromacs-work/gromacs-prot-ligand-tutorial mol new 3htb.pdb mol modstyle 0 0 licorice A few of the amino acids have 2 conformers that are present in the structure.\n Strip out the crystal waters, PO4, and BME.  awk \u0026#39;!(/HETATM/ \u0026amp;\u0026amp; /HOH/ || /HETATM/ \u0026amp;\u0026amp; /BME/ || /HETATM/ \u0026amp;\u0026amp; /PO4/)\u0026#39; 3htb.pdb \u0026gt; 3htb-clean.pdb # \u0026amp;\u0026amp; is AND, and || is OR # ! shows the lines that do not have the pattern The tutorial-supplied file is 3htb_clean.pdb. For fun, run:\ngit diff --no-index --word-diff 3htb-clean.pdb 3htb_clean.pdb Because I used the more specific awk command instead of multiple grep commands, I have a few lines in the 3htb-clean.pdb file that are missing from the 3htb_clean.pdb file. Also the 3htb_clean.pdb file is missing all the CONECT entries. I\u0026rsquo;ll remove them from 3htb-clean.pdb:\nawk \u0026#39;!/CONECT/\u0026#39; 3htb-clean.pdb \u0026gt; 3htb-tmp.pdb mv -i 3htb-tmp.pdb 3htb-clean.pdb Nice!\n Put the JZ4 coordinates into its own file.  grep JZ4 3HTB-clean.pdb \u0026gt; jz4.pdb awk \u0026#39;!(/HETATM/ \u0026amp;\u0026amp; /JZ4/)\u0026#39; 3HTB-clean.pdb \u0026gt; 3htb-tmp.pdb mv -i 3htb-tmp.pdb 3htb-clean.pdb  Check which version of python you are using with python --version. Download the CHARMM36 force field file from the MacKerell lab website. Download the cgenff_charmm2gmx.py script from the same website. Unarchive the force field tarball:  tar -zxvf charmm36-feb2021.ff.tgz rm charmm36-feb2021.ff.tgz  Write the topology for the T4 lysozyme with pdb2gmx:  gmx pdb2gmx -f 3htb-clean.pdb -o 3htb_processed.gro # choose the CHARMM36 force field (option 1) # choose the default water model (TIP 3-point, recommended, by default uses CHARMM TIP3 with LJ on H) Step Two: Prepare the Ligand Topology Add Hydrogen Atoms to JZ4  Add hydrogens using Avogadro. Save the file as a .mol2 file. Open the file in a text editor. Under the @\u0026lt;TRIPOS\u0026gt;MOLECULE heading, change ***** to JZ4. Fix the residue names and numbers such that they are all the same. Change:  @\u0026lt;TRIPOS\u0026gt;ATOM 1 C4 24.2940 -24.1240 -0.0710 C.3 167 JZ4167 -0.0650 2 C7 21.5530 -27.2140 -4.1120 C.ar 167 JZ4167 -0.0613 3 C8 22.0680 -26.7470 -5.3310 C.ar 167 JZ4167 -0.0583 4 C9 22.6710 -25.5120 -5.4480 C.ar 167 JZ4167 -0.0199 5 C10 22.7690 -24.7300 -4.2950 C.ar 167 JZ4167 0.1200 6 C11 21.6930 -26.4590 -2.9540 C.ar 167 JZ4167 -0.0551 7 C12 22.2940 -25.1870 -3.0750 C.ar 167 JZ4167 -0.0060 8 C13 22.4630 -24.4140 -1.8080 C.3 167 JZ4167 -0.0245 9 C14 23.9250 -24.7040 -1.3940 C.3 167 JZ4167 -0.0518 10 OAB 23.4120 -23.5360 -4.3420 O.3 167 JZ4167 -0.5065 11 H 25.3133 -24.3619 0.1509 H 1 UNL1 0.0230 12 H 23.6591 -24.5327 0.6872 H 1 UNL1 0.0230 13 H 24.1744 -23.0611 -0.1016 H 1 UNL1 0.0230 14 H 21.0673 -28.1238 -4.0754 H 1 UNL1 0.0618 15 H 21.9931 -27.3472 -6.1672 H 1 UNL1 0.0619 16 H 23.0361 -25.1783 -6.3537 H 1 UNL1 0.0654 17 H 21.3701 -26.8143 -2.0405 H 1 UNL1 0.0621 18 H 21.7794 -24.7551 -1.0588 H 1 UNL1 0.0314 19 H 22.2659 -23.3694 -1.9301 H 1 UNL1 0.0314 20 H 24.5755 -24.2929 -2.1375 H 1 UNL1 0.0266 21 H 24.0241 -25.7662 -1.3110 H 1 UNL1 0.0266 22 H 23.7394 -23.2120 -5.1580 H 1 UNL1 0.2921 to\n@\u0026lt;TRIPOS\u0026gt;ATOM 1 C4 24.2940 -24.1240 -0.0710 C.3 1 JZ4 -0.0650 2 C7 21.5530 -27.2140 -4.1120 C.ar 1 JZ4 -0.0613 3 C8 22.0680 -26.7470 -5.3310 C.ar 1 JZ4 -0.0583 4 C9 22.6710 -25.5120 -5.4480 C.ar 1 JZ4 -0.0199 5 C10 22.7690 -24.7300 -4.2950 C.ar 1 JZ4 0.1200 6 C11 21.6930 -26.4590 -2.9540 C.ar 1 JZ4 -0.0551 7 C12 22.2940 -25.1870 -3.0750 C.ar 1 JZ4 -0.0060 8 C13 22.4630 -24.4140 -1.8080 C.3 1 JZ4 -0.0245 9 C14 23.9250 -24.7040 -1.3940 C.3 1 JZ4 -0.0518 10 OAB 23.4120 -23.5360 -4.3420 O.3 1 JZ4 -0.5065 11 H 25.3133 -24.3619 0.1509 H 1 JZ4 0.0230 12 H 23.6591 -24.5327 0.6872 H 1 JZ4 0.0230 13 H 24.1744 -23.0611 -0.1016 H 1 JZ4 0.0230 14 H 21.0673 -28.1238 -4.0754 H 1 JZ4 0.0618 15 H 21.9931 -27.3472 -6.1672 H 1 JZ4 0.0619 16 H 23.0361 -25.1783 -6.3537 H 1 JZ4 0.0654 17 H 21.3701 -26.8143 -2.0405 H 1 JZ4 0.0621 18 H 21.7794 -24.7551 -1.0588 H 1 JZ4 0.0314 19 H 22.2659 -23.3694 -1.9301 H 1 JZ4 0.0314 20 H 24.5755 -24.2929 -2.1375 H 1 JZ4 0.0266 21 H 24.0241 -25.7662 -1.3110 H 1 JZ4 0.0266 22 H 23.7394 -23.2120 -5.1580 H 1 JZ4 0.2921  Fix the bond order using the sort_mol2_bonds.pl script.  perl sort_mol2_bonds.pl jz4.mol2 jz4_fix.mol2  Use the jz4_fix.mol2 file for the next step.  Generate the JZ4 Topology with CGenFF  Log in to your account on the CGenFF server. Click the Choose File button and choose the jz4_fix.mol2 file. Then click the Upload File button. Compare the file with the one from the tutorial:  git diff --no-index --word-diff jz4_fix.str jz4.str The tutorial file has atoms labeled C1, C2, etc. whereas the file I generated has atoms labeled C4, C5, etc. but none labeled C1 etc.. This is due to how CGenFF processed the file, because the jz4_fix.mol2 file I generated was the same as the one downloaded from the tutorial site.\nAll of my penalty scores were less than 10, so the file should be good to go.\n Use the cgenff_charmm2gmx_py3_nx2.py script to convert the topology from CHARMM to GROMACS format.  python cgenff_charmm2gmx_py3_nx2.py JZ4 jz4_fix.mol2 jz4_fix.str charmm36-feb2021.ff # I got this error: # File \u0026#34;cgenff_charmm2gmx_py3_nx2.py\u0026#34;, line 53, in \u0026lt;module\u0026gt; # import numpy as np # ModuleNotFoundError: No module named \u0026#39;numpy\u0026#39; Try to install numpy.\npython3 -m pip install numpy Looks like it installed okay. Try script again:\npython cgenff_charmm2gmx_py3_nx2.py JZ4 jz4_fix.mol2 jz4_fix.str charmm36-feb2021.ff # got this error: # ModuleNotFoundError: No module named \u0026#39;networkx\u0026#39; # try to fix: python3 -m pip install networkx # try again: python cgenff_charmm2gmx_py3_nx2.py JZ4 jz4_fix.mol2 jz4_fix.str charmm36-feb2021.ff # Got this error: # File \u0026#34;cgenff_charmm2gmx_py3_nx2.py\u0026#34;, line 991, in \u0026lt;module\u0026gt; # if(float(nx.__version__) \u0026lt; 2.0): # ValueError: could not convert string to float: \u0026#39;2.6.3\u0026#39; # try to use the other script: python cgenff_charmm2gmx_py3_nx1.py JZ4 jz4_fix.mol2 jz4_fix.str charmm36-feb2021.ff  Try the following:  python3 -m pip uninstall networkx python3 -m pip install networkx==2.3 python cgenff_charmm2gmx_py3_nx2.py JZ4 jz4_fix.mol2 jz4_fix.str charmm36-feb2021.ff I got the error:\nNOTE 3: Please be sure to use the same version of CGenFF in your simulations that was used during parameter generation: --Version of CGenFF detected in jz4_fix.str : 4.5 --Version of CGenFF detected in charmm36-feb2021.ff/forcefield.doc : 4.4 WARNING: CGenFF versions are not equivalent! From the web:\n Don\u0026rsquo;t worry about this difference. The web server needs to be updated, but not in any way that affects the end user.\n —Justin A. Lemkul, Ph.D.\nBuild the Complex  Convert jz4_ini.pdb to .gro format with editconf:  gmx editconf -f jz4_ini.pdb -o jz4.gro  Copy 3htb_processed.gro to a new file to be manipulated, for instance, call it complex.gro.  cp 3htb_processed.gro complex.gro  Copy the coordinate section of jz4.gro and paste it into complex.gro, below the last line of the protein atoms, and before the box vectors, like so:  163ASN HD22 2611 0.944 -0.584 -0.525 163ASN C 2612 0.621 -0.740 -0.126 163ASN OT1 2613 0.624 -0.616 -0.140 163ASN OT2 2614 0.683 -0.703 -0.011 1JZ4 C4 1 2.429 -2.412 -0.007 1JZ4 C7 2 2.155 -2.721 -0.411 1JZ4 C8 3 2.207 -2.675 -0.533 1JZ4 C9 4 2.267 -2.551 -0.545 1JZ4 C10 5 2.277 -2.473 -0.430 1JZ4 C11 6 2.169 -2.646 -0.295 1JZ4 C12 7 2.229 -2.519 -0.308 1JZ4 C13 8 2.246 -2.441 -0.181 1JZ4 C14 9 2.392 -2.470 -0.139 1JZ4 OAB 10 2.341 -2.354 -0.434 1JZ4 H1 11 2.531 -2.436 0.015 1JZ4 H2 12 2.366 -2.453 0.069 1JZ4 H3 13 2.417 -2.306 -0.010 1JZ4 H4 14 2.107 -2.812 -0.407 1JZ4 H5 15 2.199 -2.735 -0.617 1JZ4 H6 16 2.304 -2.518 -0.635 1JZ4 H7 17 2.137 -2.681 -0.204 1JZ4 H8 18 2.178 -2.476 -0.106 1JZ4 H9 19 2.227 -2.337 -0.193 1JZ4 H10 20 2.458 -2.429 -0.214 1JZ4 H11 21 2.402 -2.577 -0.131 1JZ4 H12 22 2.374 -2.321 -0.516 5.99500 5.19182 9.66100 0.00000 0.00000 -2.99750 0.00000 0.00000 0.00000  IMPORTANT! Since we have added 22 more atoms into the .gro file, increment the second line of complex.gro to reflect this change. There should be 2636 atoms in the coordinate file now.  Build the Topology  Insert a line that says #include \u0026quot;jz4.itp\u0026quot; into topol.top after the position restraint file is included, like so:  ; Include Position restraint file #ifdef POSRES #include \u0026#34;posre.itp\u0026#34; #endif ; Include water topology #include \u0026#34;./charmm36-feb2021.ff/tip3p.itp\u0026#34; Becomes \u0026hellip;\n; Include Position restraint file #ifdef POSRES #include \u0026#34;posre.itp\u0026#34; #endif ; Include ligand topology #include \u0026#34;jz4.itp\u0026#34; ; Include water topology #include \u0026#34;./charmm36-feb2021.ff/tip3p.itp\u0026#34;  Insert an #include statement to add the jz4.prm parameters at the TOP of topol.top, like so:  ; Include forcefield parameters #include \u0026#34;./charmm36-feb2021.ff/forcefield.itp\u0026#34; [ moleculetype ] ; Name nrexcl Protein_chain_A 3 Becomes\n; Include forcefield parameters #include \u0026#34;./charmm36-feb2021.ff/forcefield.itp\u0026#34; ; Include ligand parameters #include \u0026#34;jz4.prm\u0026#34; [ moleculetype ] ; Name nrexcl Protein_chain_A 3 It is important to place this statement before any [ moleculetype ] entry. It must also appear AFTER the #include statement for the parent force field.\n Add the JZ4 molecule to [ molecules ] directive, like so:  [ molecules ] ; Compound #mols Protein_chain_A 1 JZ4 1 Step Three: Defining the Unit Cell \u0026amp; Adding Solvent  Define the unit cell and fill it with water.  gmx editconf -f complex.gro -o newbox.gro -bt dodecahedron -d 1.0 gmx solvate -cp newbox.gro -cs spc216.gro -p topol.top -o solv.gro Step Four: Adding Ions  Use grompp to assemble a .tpr file, using any .mdp file. I downloaded the ions.mdp file from this website.  gmx grompp -f ions.mdp -c solv.gro -p topol.top -o ions.tpr  Pass the .tpr file to genion:  gmx genion -s ions.tpr -o solv_ions.gro -p topol.top -pname NA -nname CL -neutral # when prompted, choose group 15: # Group 15 ( SOL) has 30882 elements The names of the ions specified with -pname and -nname are always the elemental symbol in all capital letters. Refer to ions.itp for proper nomenclature if you encounter difficulties.\n Open the topol.top file. Your [ molecules ] directive should now look like:  [ molecules ] ; Compound #mols Protein_chain_A 1 JZ4 1 SOL 10288 CL 6 Step Five: Energy Minimization  Create the binary input using grompp using the em.mdp input parameter file from this website:  gmx grompp -f em.mdp -c solv_ions.gro -p topol.top -o em.tpr  Invoke mdrun to carry out the energy minimization (EM):  gmx mdrun -v -deffnm em For the tutorial author, the system converged relatively quickly:\nSteepest Descents converged to Fmax \u0026lt; 1000 in 143 steps Potential Energy = -4.9014547e+05 Maximum force = 8.7411469e+02 on atom 27 Norm of force = 5.6676244e+01 My system also converged relatively quickly:\nSteepest Descents converged to Fmax \u0026lt; 1000 in 156 steps Potential Energy = -4.9085631e+05 Maximum force = 8.8324829e+02 on atom 2045 Norm of force = 5.6558131e+01 Step Six: Equilibration Restraining the Ligand  Generate a position restraint topology for the ligand. First, create an index group for JZ4 that contains only its non-hydrogen atoms:  gmx make_ndx -f jz4.gro -o index_jz4.ndx ... \u0026gt; 0 \u0026amp; ! a H* \u0026gt; q  Then, execute the genrestr module and select this newly created index group (which will be group 3 in the index_jz4.ndx file):  gmx genrestr -f jz4.gro -n index_jz4.ndx -o posre_jz4.itp -fc 1000 1000 1000  Include this information in our topology. Here we want to restrain the ligand whenever the protein is also restrained. Add the following lines to your topology file (topol.top) in the location indicated (Location matters!):  ; Include Position restraint file #ifdef POSRES #include \u0026#34;posre.itp\u0026#34; #endif ; Include ligand topology #include \u0026#34;jz4.itp\u0026#34; ; Ligand position restraints #ifdef POSRES #include \u0026#34;posre_jz4.itp\u0026#34; #endif ; Include water topology #include \u0026#34;./charmm36-feb2021.ff/tip3p.itp\u0026#34; Thermostats Important: Do not couple every single species in your system separately.\nGroup JZ4 with the protein for the purposes of temperature coupling. In the same way, the few Cl- ions we inserted are considered part of the solvent. We need a special index group that merges the protein and JZ4. We accomplish this with the make_ndx module, supplying any coordinate file of the complete system. Here, we use em.gro, the output (minimized) structure of our system:\ngmx make_ndx -f em.gro -o index.ndx … 0 System : 33506 atoms 1 Protein : 2614 atoms 2 Protein-H : 1301 atoms 3 C-alpha : 163 atoms 4 Backbone : 489 atoms 5 MainChain : 651 atoms 6 MainChain+Cb : 803 atoms 7 MainChain+H : 813 atoms 8 SideChain : 1801 atoms 9 SideChain-H : 650 atoms 10 Prot-Masses : 2614 atoms 11 non-Protein : 30892 atoms 12 Other : 22 atoms 13 JZ4 : 22 atoms 14 CL : 6 atoms 15 Water : 30864 atoms 16 SOL : 30864 atoms 17 non-Water : 2642 atoms 18 Ion : 6 atoms 19 JZ4 : 22 atoms 20 CL : 6 atoms 21 Water_and_ions : 30870 atoms  Merge the \u0026ldquo;Protein\u0026rdquo; and \u0026ldquo;JZ4\u0026rdquo; groups with the following, where \u0026gt; indicates the make_ndx prompt:  \u0026gt; 1 | 13 Copied index group 1 \u0026#39;Protein\u0026#39; Copied index group 13 \u0026#39;JZ4\u0026#39; Merged two groups with OR: 2614 22 -\u0026gt; 2636 22 Protein_JZ4 : 2636 atoms \u0026gt; q We can now set tc-grps = Protein_JZ4 Water_and_ions to achieve our desired \u0026ldquo;Protein Non-Protein\u0026rdquo; effect.\n Proceed with NVT equilibration using the nvt.mdp file from this website.  gmx grompp -f nvt.mdp -c em.gro -r em.gro -p topol.top -n index.ndx -o nvt.tpr gmx mdrun -deffnm nvt Laptop fan started running almost immediately. I used an ice pack to cool the computer.\nStarted run at 2:02PM, finished at 2:12PM (634 s).\nStep Seven: Equilibration, Part 2  Once the NVT simulation is complete, proceed to NPT using the npt.mdp file from this website:  gmx grompp -f npt.mdp -c nvt.gro -t nvt.cpt -r nvt.gro -p topol.top -n index.ndx -o npt.tpr gmx mdrun -deffnm npt Run started at 2:25PM, finished at 2:38PM (690 s).\nStep Eight: Production MD  Download the md.mdp file from this website. Run a 10 ns molecular dynamics (MD) simulation:  gmx grompp -f md.mdp -c npt.gro -t npt.cpt -p topol.top -n index.ndx -o md_0_10.tpr gmx mdrun -deffnm md_0_10 The 100 ps runs took \\(\\approx\\) 10 min. For the production MD run of 10 ns, expect:\n\\[ \\mathsf{10,ns\\times\\cfrac{1000,ps}{ns}\\times\\cfrac{10,min}{100,ps}\\times\\cfrac{1,hr}{60,min}=16.7,hr} \\]\nNote: to print the math, I used MathJax. For inline math, use \\\\(\u0026lt;math here\u0026gt;\\\\) and for more complex math use:\n\\\\[ \u0026lt;complex math here\u0026gt; \\\\] "
},
{
	"uri": "https://dgoppenheimer.github.io/pymol-notes/introduction/customizing-the-site/",
	"title": "Customizing the Site",
	"tags": [],
	"description": "",
	"content": "Removing the copy-to-clipboard button from inline code The copy-to-clipboard button is useful on code blocks, but distracting when attached to the inline code. I thought I could remove it using custom css, so I created a static/css directory in the root of my project and added a custom.css file to contain my overrides. To have hugo see the custom file, add the following to config.toml:\n[params] custom_css = [\u0026#34;css/custom.css\u0026#34;] Now I need to figure out what css to override.\nFrom searching the web, I found an old issue on the hugo-theme-learn repository, Configuration of the appearance of the copy-to-clipboard icons, where a user suggested using this css:\n:not(pre) \u0026gt; code + span.copy-to-clipboard { display: none; } But more importantly, the theme designer, matcornic, updated the theme to provide this function in the theme\u0026rsquo;s configuration file.\nAdd this to config.toml in the [params] section:\n[params] disableInlineCopyToClipBoard = true Success!\nIf I would have read the Configuration section of the Learn Theme for Hugo documentation, I would have seen the global site parameters where disableInlineCopyToClipBoard is mentioned.\n "
},
{
	"uri": "https://dgoppenheimer.github.io/pymol-notes/",
	"title": "PyMOL Notes",
	"tags": [],
	"description": "",
	"content": "  Welcome to PyMOL Notes Mainly, I built this site to keep track of my notes when using PyMOL. Hopefully I\u0026rsquo;ll be able to find what I need, when I need it.\nBut I also wanted to make a website using Hugo. I previously built a blog, Cell Bones, using Jekyll. When I found the Hugo theme, Learn, I thought it would be ideal to sort out all my PyMOL notes.\n"
},
{
	"uri": "https://dgoppenheimer.github.io/pymol-notes/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://dgoppenheimer.github.io/pymol-notes/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]